1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

For different interrupts, we need to perform different actions. For instance, for divide by zero, we simply need to terminate the program, while
for a page fault, we do some work w/ page protections. Also, in our current implementation, we have some exceptions with error
codes and some without, which would neccessitate seperate handler functions.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

The code produces trap 13, or the General Protection Exception, due to the rule in the Intel Manual that calls #13 when executing INT n, 
when the CPL is greater than the DPL of trap #13. If trap #14 was called, the kernel would perform some page fault handling logic even though we have no page fault.
This page fault handling logic might cause incorrect behavior, loading other pages or removing the current page, and memory access issues.